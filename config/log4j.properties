#log4j有三个组件Loggers(记录器)，Appenders (输出源)和Layouts(布局)
###%m   输出代码中指定的消息
###%n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” 
###%t   输出产生该日志事件的线程名 
###%r   输出自应用启动到输出该log信息耗费的毫秒数 
###%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
###%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )  
###%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，
###     比如：%d{yyy MMM dd HH:mm:ss , SSS}，
###     输出类似：2002年10月18日  22 ： 10 ： 28 ， 921 

###org.apache.log4j.HTMLLayout（以HTML表格形式布局）
###org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
###org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
###org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息

###将输出日志统一格式为表格，便于查看日志
###将控制台日志格式设置为灵活布局，便于查看
###日志全局设置设置###
log4j.rootLogger = info,stdout,D,E

### 输出信息到控制抬 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n

### 输出DEBUG 级别以上的日志到=E://logs/error.log ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = C\://logs/log.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG 
log4j.appender.D.layout = org.apache.log4j.HTMLLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

### 输出ERROR 级别以上的日志到=E://logs/error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File =C\://logs/error.log 
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.layout = org.apache.log4j.HTMLLayout
log4j.appender.E.layout.ConversionPattern =%-d{yyyy-MM-dd HH\:mm\:ss}  [ %t\:%r ] - [ %p ]  %m%n